import torch
import torch.nn as nn
class Darknet19(nn.Module):
    def __init__(self):
        super(Darknet19,self).__init__()
        self.block1 = nn.Sequential(
            nn.Conv2d(3,32,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=32,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
            
            nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=64,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
            )
        self.block2 = nn.Sequential(
            nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=128,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(128,64,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=64,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=128,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
            
            nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=256,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(256,128,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=128,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=256,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        )
        self.block3 = nn.Sequential(
            nn.Conv2d(256,512,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=512,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(512,256,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=256,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(256,512,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=512,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(512,256,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=256,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(256,512,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=512,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True)
        )
        self.block4 = nn.Sequential(
            nn.MaxPool2d(kernel_size=2, stride=2, padding=0),
            nn.Conv2d(512,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(1024,512,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=512,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(512,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(1024,512,kernel_size=1,stride=1,padding=0),
            nn.BatchNorm2d(num_features=512,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(512,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(1024,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(1024,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
        )
        self.block5 = nn.Sequential(
            nn.Conv2d(1024,1024,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(num_features=1024,momentum=0.01),
            nn.LeakyReLU(0.1,inplace=True),
            
            nn.Conv2d(1024,125,kernel_size=1,stride=1,padding=0),
#             nn.AvgPool2d((1, 1)) ##这个均值池化有啥用呢？
        )
    
    def forward(self,x):
        block1 = self.block1(x)
        block2 = self.block2(block1)
        block3 = self.block3(block2)
        block4 = self.block4(block3)
        block5 = self.block5(block4)
        return block5
